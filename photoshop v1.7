//Desc:
// an image editor program that is capable of applying some filters to the given images using the attached libraries
//it can handle process edit and save the image
// The filters are
//    1.Invert Image
//    2.Darken or Lighten
//    3.Convert to Black & White
//    4.Convert to Grayscale
//    5.Flip (Horizontal or Vertical)
//    6.Rotate (90, 180, 270 degrees)
//    7.Merge Image
//    8.Crop Image
//    9.Add Frame
//    10.Resize Image
//    11.Detect Image Edges
//    12.Blur Image
//    13.Sunlight Wano
//    14.Purple Wano
//
//    github repo https://github.com/basil186/Photoshop_OOP_25.git
//    drive link (video & docx) https://drive.google.com/drive/folders/1Vfvq4CB_q5LBAtCXI2nICG3_GigDppu1?usp=drive_link
//
//    Students info and their filters
//      Name:               ID:                Sec:                    Filters done:
//Basil HossamEldin Adham   20230545           S17                      (1,3,4,9,13)
//Mohamed Abdelaziz Mohamed 20231246           S18                      (2,5,7,8,14)
//Hossam Anwar Alsayed      20227032           S                        (6,11,12)




#include "Image_Class.h"
#include <iostream>

using namespace std;

int main () {
    bool continueProgram = true;


    string filename;
    cout << "please enter the image name with extension" <<  endl;
    cin >> filename;


    
    while (continueProgram) {
        int choice;
        cout << "Menu\n";
        cout << "1:Invert Image\n";
        cout << "2:Darken & Lighten Image\n";
        cout << "3:Black & White Image\n";
        cout << "4:Grayscale Image\n";
        cout << "5:Flip Image\n";
        cout << "6:Rotate Image\n";
        cout << "7:Merge Image\n";
        cout << "8:Crop Image\n";
        cout << "9:Add Frame\n";
        cout << "10:Resize Image\n";
        cout << "11:Detect Image Edges\n";
        cout << "12:Blur Image\n";
        cout << "13:Sunlight Wano\n";
        cout << "14:Purple Wano\n";
        cout << "15:exit\n";
        cout << "Enter choice (1-15)";
        cin >> choice;

        switch (choice) {
            case 1: {
                //invert

                Image img(filename);
                cout << "Image successfully loaded\n" << endl;

                for (int i = 0; i < img.width; i++ ) {
                    for (int j = 0; j < img.height; j++ ) {
                        for (int k = 0;k <3; ++k) {
                            img (i,j,k) = 255 - img(i,j,k);
                            // to invert the colors we need to  reverse each color intensity by 255 - color value (intensity)
                        }
                    }
                }
                cout << "Pls enter image name to store new image\n";
                cout << "and specify extension .jpg, .bmp, .png, .tga: ";
                cin >> filename;
                img.saveImage(filename);
                break;
            }
            case 2: {
                //Darken & Lighten

                Image img(filename);
                cout << "Image loaded successfully" << endl;

                string filterType;
                cout << "Choose filter type ('darken' or 'lighten'): ";
                cin >> filterType;

                if (filterType == "darken") {
                    for (int i = 0; i < img.width; i++ ) {
                        for (int j = 0; j < img.height; j++ ) {
                            for (int k = 0;k <3; ++k) {
                                img(i,j,k) = max(0,min(255, img(i,j,k) / 2));
                                // black(dark) (0,0,0)
                            }
                        }
                    }
                    cout << "Image darkened by 50%" << endl;
                } else if (filterType == "lighten") {
                    for (int i = 0; i < img.width; i++ ) {
                        for (int j = 0; j < img.height; j++ ) {
                            for (int k = 0;k <3; ++k) {
                                img(i,j,k) = max(0,min(255, img(i,j,k) * 2));
                                // white(bright) (255,255,255)
                            }
                        }
                    }
                    cout << "Image lightened by 50%" << endl;
                } else {
                    cerr << "Invalid filter type!" << endl;
                    return 1;
                }

                string outputFilename;
                cout << "Enter the output image filename with extension (.jpg, .bmp, .png, .tga): ";
                cin >> outputFilename;
                if (img.saveImage(outputFilename)) {
                    cout << "Filtered image saved successfully as " << outputFilename << endl;
                } else {
                    cerr << "Error saving filtered image!" << endl;
                }
                break;
            }
            case 3: {
                //B&W

                Image img(filename);
                for (int i = 0; i < img.width; i++ ) {
                    for (int j = 0; j < img.height; j++ ) {
                        unsigned int avg = 0;
                        for (int k = 0; k < 3; k++) avg += img(i,j,k);
                        avg /= 3;
                        // looping to add the 3 colors channels together then dividing them by 3 to get their average brightness

                        int resultclr;
                        if (avg >= 128) {
                            //brighter colors turn to white
                            resultclr = 255;
                        }else {
                            //darker colors turn to black
                            resultclr = 0;
                        }

                        for (int k = 0; k < 3; ++k) img(i,j,k) = resultclr;
                    }
                    //assigning each channel with its corresponding black or white color
                }
                cout << "Pls enter image name to store new image\n";
                cout << "and specify extension .jpg, .bmp, .png, .tga: ";
                cin >> filename;
                img.saveImage(filename);
                break;
            }
            case 4: {
                //Grayscale

                Image img(filename);
                cout << "loaded successfully" << endl;

                for (int i = 0; i < img.width; i++ ) {
                    for (int j = 0; j < img.height; j++ ) {
                        unsigned int avg = 0;
                        for (int k = 0; k < 3; k++) avg += img(i,j,k);
                        avg /= 3;
                        // looping to add the 3 colors channels together then dividing them by 3 to get their average brightness
                        for (int k = 0; k < 3; ++k) img(i,j,k) = avg;
                    }
                }
                cout << "Pls enter image name to store new image\n";
                cout << "and specify extension .jpg, .bmp, .png, .tga: ";
                cin >> filename;
                img.saveImage(filename);
                break;
            }
            case 5: {
                //Flip

                Image img(filename);
                cout << "Image loaded successfully" << endl;

                cout << "1. Flip Horizontally \n";
                cout << "2. Flip Vertical\n";
                int choice;
                cin >> choice;

                Image flip(img.width, img.height);
                switch (choice) {
                    case 1: {
                        for (int i = 0; i < img.width; i++ ) {
                            for (int j = 0; j < img.height; j++ ) {
                                for (int k = 0; k < 3; ++k) {
                                    flip(i, j, k) = img(img.width - 1 - i, j, k);
                                }
                            }
                        }
                        break;
                    }
                    case 2: {
                        for (int i = 0; i < img.width; i++ ) {
                            for (int j = 0; j < img.height; j++ ) {
                                for (int k = 0; k < 3; ++k) {
                                    flip(i, j, k) = img(i, img.height - 1 - j, k);
                                }
                            }
                        }
                        break;
                    }
                    default:
                        cout << "Invalid choice." << endl;
                        break;
                }
                cout << "Please enter the image name to store the new image\n";
                cout << "and specify the extension (.jpg, .bmp, .png, .tga): ";
                cin >> filename;
                flip.saveImage(filename);
                break;
            }
            case 6: {
                //Rotate

                Image img(filename);

                cout << "Image loaded successfully" << endl;

                cout << "1. rotate 90deg\n";
                cout << "2. rotate 180deg\n";
                cout << "3. rotate 270deg\n";

                int choice;
                cin >> choice;
                Image flip(img.height, img.width);

                switch (choice) {
                    case 1: {
                        for (int i = 0; i < img.width; i++ ) {
                            for (int j = 0; j < img.height; j++ ) {
                                for (int k = 0; k < 3; ++k) {
                                    flip(j, img.width - 1 - i, k) = img(i, j, k);
                                }
                            }
                        }
                        cout << "Please enter the image name to store the new image\n";
                        cout << "and specify the extension (.jpg, .bmp, .png, .tga): ";
                        cin >> filename;
                        flip.saveImage(filename);
                        break;
                    }
                    case 2: {
                        Image f180(img.width, img.height);
                        for (int i = 0; i < img.width; i++ ) {
                            for (int j = 0; j < img.height; j++ ) {
                                for (int k = 0; k < 3; ++k) {
                                    f180(i, j, k) = img(img.width - 1 - i, img.height - 1 - j, k);
                                }
                            }
                        }
                        cout << "Please enter the image name to store the new image\n";
                        cout << "and specify the extension (.jpg, .bmp, .png, .tga): ";
                        cin >> filename;
                        f180.saveImage(filename);
                        break;
                    }

                    case 3: {
                        for (int i = 0; i < img.width; i++ ) {
                            for (int j = 0; j < img.height; j++ ) {
                                for (int k = 0; k < 3; ++k) {
                                    flip(img.height - 1 - j, i, k) = img(i, j, k);
                                }
                            }
                        }
                        cout << "Please enter the image name to store the new image\n";
                        cout << "and specify the extension (.jpg, .bmp, .png, .tga): ";
                        cin >> filename;
                        flip.saveImage(filename);
                        break;
                    }
                    default:
                        cout << "Invalid choice." << endl;
                        break;
                }

                break;
            }
            case 7: {
                // Merge

                Image img(filename);
                cout << "Image successfully loaded\n" << endl;
                string filename2;
                cout << "Please enter the second image name with extension: ";
                cin >> filename2;

                Image img2(filename2);
                if (img2.width == 0) {
                    cout << "Could not load the second image.\n";
                    break;
                }


                int width = min(img.width, img2.width);
                int height = min(img.height, img2.height);


                for (int i = 0; i < width; ++i) {
                    for (int j = 0; j < height; ++j) {
                        for (int k = 0; k < 3; ++k) {
                            img(i, j, k) = (img(i, j, k) + img2(i, j, k)) / 2;
                        }
                    }
                }
                cout << "Merge filter applied.\n";
                cout << "Please enter the image name to store the new image\n";
                cout << "and specify the extension (.jpg, .bmp, .png, .tga): ";
                cin >> filename;
                img.saveImage(filename);
                break;
            }
            case 8: {
                //crop

                Image img(filename);
                cout << "loaded successfully" << endl;
                int width;
                int height;
                cout << "Enter width for cropping:\n";
                cin >> width;
                cout << "Enter height for cropping:\n";
                cin >> height;
                int x = 1;
                int y = 1;
                // assuming x and y starting positions
                Image croppedImage(width, height);
                for (int i = 0; i < width; ++i) {
                    for (int j = 0; j < height; ++j) {
                        for (int k = 0; k < 3; ++k) {
                            croppedImage(i, j, k) = img(x + i, y + j, k);

                        }

                    }
                }
                cout << "Pls enter image name to store new image\n";
                cout << "and specify extension .jpg, .bmp, .png, .tga: ";
                cin >> filename;

                int z = croppedImage.saveImage(filename);
                cout << "Cropped image saved successfully." << endl;
                cout << z;
                break;

            }
            case 9: {
                // add frame

                Image img(filename);
                cout << "Loaded successfully." << endl;

                Image frame(img.width + 150,img.height + 150);
                for (int i = 0; i < img.width; i++) {
                    for (int j = 0; j < img.height; j++) {
                        for (int k = 0; k < 3; ++k) {
                            frame(i + 75 , j +75 ,k) =  img(i,j,k);
                        };


                    }
                }
                cout << "Please enter the image name to store the new image\n";
                cout << "and specify the extension (.jpg, .bmp, .png, .tga): ";
                cin >> filename;
                frame.saveImage(filename);
                break;
            }
            case 10: {
                //Resize

                Image img(filename);
                cout << "Loaded successfully." << endl;

                int width, height;
                float ratio;
                cout << "Enter the reduction/increase ratio (ex: 0.5 , 2): ";
                cin >> ratio;

                if (ratio <= 0) {
                    cout << "Invalid ratio. Must be greater than 0." << endl;
                    break;
                }

                width = static_cast<int>(img.width * ratio);
                height = static_cast<int>(img.height * ratio);

                Image resized(width, height);

                float x = static_cast<float>(img.width) / width;
                float y = static_cast<float>(img.height) / height;

                for (int i = 0; i < width; ++i) {
                    for (int j = 0; j < height; ++j) {
                        for (int k = 0; k < 3; ++k) {
                            int nx = static_cast<int>(i * x);
                            int ny = static_cast<int>(j * y);
                            resized(i, j, k) = img(nx, ny, k);
                        }
                    }
                }

                cout << "Please enter the image name to store the new image\n";
                cout << "and specify the extension (.jpg, .bmp, .png, .tga): ";
                cin >> filename;
                resized.saveImage(filename);
                break;
            }
            case 11: {
                //Detect Image Edges

                Image img(filename);

                if (img.loadNewImage(filename)) {
                    cout << "Image loaded successfully" << endl;
                } else {
                    cerr << "Error loading image" << endl;
                    return 1;
                }

                for (int i = 0; i < img.width; ++i) {
                    for (int j = 0; j < img.height; ++j) {
                        unsigned int avg = 0;
                        for (int k = 0; k < img.channels; ++k) {
                            avg += img(i, j, k);
                        }
                        avg = avg / 3;
                        for (int k = 0; k < img.channels; ++k) {
                            img(i, j, k) = avg;
                        }
                    }
                }

                int sobelX[3][3] = {{-1, 0, 1},
                                    {-2, 0, 2},
                                    {-1, 0, 1}};
                int sobelY[3][3] = {{-1, -2, -1},
                                    {0, 0, 0},
                                    {1, 2, 1}};
                int threshold = 100;

                Image edges(img.width, img.height);

                for (int x = 1; x < img.width - 1; ++x) {
                    for (int y = 1; y < img.height - 1; ++y) {
                        int gradientX = 0, gradientY = 0;

                        for (int i = -1; i <= 1; ++i) {
                            for (int j = -1; j <= 1; ++j) {
                                int pixelX = x + i;
                                int pixelY = y + j;
                                int pixelVal = img(pixelX, pixelY, 0);

                                gradientX += pixelVal * sobelX[i + 1][j + 1];
                                gradientY += pixelVal * sobelY[i + 1][j + 1];
                            }
                        }

                        int gradientMagnitude = abs(gradientX) + abs(gradientY);
                        unsigned char edgeColor = (gradientMagnitude > threshold) ? 255 : 0;

                        for (int k = 0; k < 3; ++k) {
                            edges(x, y, k) = edgeColor;
                        }
                    }
                }

                string outputFilename;
                cout << "Please enter the image name to save the edges image and specify extension .jpg, .bmp, .png, .tga: ";
                cin >> outputFilename;

                edges.saveImage(outputFilename);

                cout << "Edges image saved successfully." << endl;

                break;
            }

            case 12: {
                // blur

                Image img(filename);
                cout << "Loaded successfully" << endl;
                    int radius = 8;

                Image blur(img.width, img.height);
                Image temp_blur(img.width, img.height);


                cout <<"applying horizontal blur"<< endl;

                //1st half horizontal blur

                for (int i = 0; i < img.width; ++i) {
                    for (int j = 0; j < img.height; ++j) {
                        for (int k = 0; k < 3; ++k) {
                            int sum = 0;
                            int count = 0;

                            for (int offseti = -radius; offseti <= radius; offseti++) {

                                    int newi = i + offseti;


                                    if (newi >= 0 && newi < img.width ) {
                                        sum += img(newi,j,k);
                                        count++;
                                    }
                                }
                            temp_blur(i,j,k) = sum / count;
                            }
                        }
                    }
                cout << "horizontal blur done" << endl;
                for (int i =0; i < img.width; ++i){
                    for (int j = 0; j < img.height; ++j) {
                        for (int k = 0; k < 3; ++k) {

                            int sum = 0;
                            int count = 0;

                            for (int offsetj = -radius; offsetj <= radius; offsetj++) {
                                int newj = j + offsetj;

                                if (newj >= 0 && newj < img.height) {
                                    sum += temp_blur(i ,newj,k);
                                    count++;
                                }
                            }
                            blur(i,j,k) = sum / count;
                        }
                    }

                }
                cout << "Blur applied successfully\n";
                cout << "Please enter the image name to store the new image\n";
                cout << "and specify the extension (.jpg, .bmp, .png, .tga): ";
                cin >> filename;
                blur.saveImage(filename);
                break;
            }

            case 13: {
                //Sunlight Wano
                //bonus

                Image img(filename);
                cout << "loaded successfully" << endl;

                for (int i = 0; i < img.width; i++) {
                    for (int j = 0; j < img.height; j++) {

                        // Boost red and green, reduce blue to get the warmth

                        img(i, j, 0) = min(255, img(i, j, 0) + 40);
                        //Increase red

                        img(i, j, 1) = min(255, img(i, j, 1) + 30);
                        //Increase green to add warmth (yellowish look)

                        img(i, j, 2) = max(0, img(i, j, 2) - 60);
                        // Decrease blue
                    }
                }
                cout << "Please enter the image name to store the new image\n";
                cout << "and specify the extension (.jpg, .bmp, .png, .tga): ";
                cin >> filename;
                img.saveImage(filename);
                break;
            }

            case 14: {
                // Purple Wano
                //bonus

                Image img(filename);
                for (int i = 0; i < img.width; i++ ) {
                    for (int j = 0; j < img.height; j++ ) {

                        // to get purple look increase red and blue and tune down green

                        // Boost Red
                        img(i, j, 0) = min(255, img(i, j, 0) + 30);

                        // Reduce Green (k=1)
                        img(i, j, 1) = max(0, img(i, j, 1) - 50);

                        // Boost Blue (k=2)
                        img(i, j, 2) = min(255, img(i, j, 2) + 30);


                    }
                }
                cout << "Please enter the image name to store the new image\n";
                cout << "and specify the extension (.jpg, .bmp, .png, .tga): ";
                cin >> filename;
                img.saveImage(filename);
                break;
            }
            case 15: {
                continueProgram = false;
                break;
            }
            default:
                cout << "Invalid choice." << endl;
                break;}
         }
}
